#!/bin/sh
#start=$(date +%s.%N)                               # Uncomment for benchmarking
cd "${0%/*}" || exit                                # Run from this directory
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions        # Tutorial run functions
#------------------------------------------------------------------------------

if [ "$1" != "" ]
    then airfoil=$1
else
    echo Missing airfoil argument!
fi

if [ "$2" != "" ]
    then alpha=$2
else
    echo Missing angle of attack argument!
fi

if [ "$3" != "" ]
  then mach=$3
else
  echo Missing mach number argument!
fi

#------------------------------------------------------------------------------
# Generate initial conditions of simulation
python scripts/generateZeroDirectoryFiles.py $mach

# Generate ".stl" file of airfoil
python scripts/generateStlFile.py $airfoil $alpha

# Generate blockMeshDict file
python scripts/generateBlockMeshDict.py 0.1

# Generate surfaceFeatureExtractDict file
python scripts/generateSurfaceFeatureExtractDict.py $airfoil $alpha

# Generate ".eMesh" file in "constant/triSurface" directory
runApplication surfaceFeatureExtract
rm -f log.surfaceFeatureExtract

# Generate background mesh with blockMesh
runApplication blockMesh
rm -f log.blockMesh

#------------------------------------------------------------------------------
# Generate refinementRegions without airfoil
python scripts/generateSnappyHexMeshDict.py $airfoil $alpha $mach -meshing 0

runApplication snappyHexMesh -overwrite
mv log.snappyHexMesh log.sHM0

rm -f constant/polyMesh/cellLevel
rm -f constant/polyMesh/level0Edge
rm -f constant/polyMesh/pointLevel
rm -f constant/polyMesh/surfaceIndex

#------------------------------------------------------------------------------
# Generate castellatedMesh and snapping around airfoil
python scripts/generateSnappyHexMeshDict.py $airfoil $alpha $mach -meshing 1

runApplication snappyHexMesh -overwrite
mv log.snappyHexMesh log.sHM1
#rm -f log.snappyHexMesh

rm -f constant/polyMesh/cellLevel
rm -f constant/polyMesh/level0Edge
rm -f constant/polyMesh/pointLevel
rm -f constant/polyMesh/surfaceIndex

#------------------------------------------------------------------------------
# Generate addLayers around airfoil
python scripts/generateSnappyHexMeshDict.py $airfoil $alpha $mach -meshing 2
python scripts/generateExtrudeMeshDict.py -thickness 1 -meshing 0

rm -f system/fvOptions # Remove fvOptions dict to avoid crash of addLayers

runApplication snappyHexMesh -overwrite
mv log.snappyHexMesh log.sHM2

runApplication extrudeMesh
#rm -f log.extrudeMesh

#------------------------------------------------------------------------------
# Change type of symmetry patches since rhoSimpleFoam cannot handle
# patches of type "SymmetryPlane" for 2D setup - sims are ran in 3D if not done
runApplication createPatch -overwrite
rm -f log.createPatch

runApplication checkMesh -latestTime # Check mesh for errors

python scripts/generateFvOptions.py # Generate fvOptions

python scripts/generateForceCoefficients.py $mach # Generate controlDict

restore0Dir # Generate "0" directory from template "/0.orig"
#------------------------------------------------------------------------------
#end=$(date +%s.%N)                               # Uncomment for benchmarking
#runtime=$(python -c "print(${end} - ${start})")  # Uncomment for benchmarking
#
#echo "Runtime was $runtime"                      # Uncomment for benchmarking


#------------------------------------------------------------------------------
# Backup implementation for parallelised execution of sHM
#runApplication decomposePar
#
#runParallel snappyHexMesh -overwrite
#mv log.snappyHexMesh log.sHM1
##rm -f log.snappyHexMesh
#
#runApplication reconstructParMesh -constant
#ls -d processor* | xargs -i rm -rf ./{} $1
#rm -f log.decomposePar
#rm -f log.reconstructParMesh